version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: shift-bidding-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-shift_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-shift_password_change_in_production}
      POSTGRES_DB: ${DB_NAME:-shift_bidding}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - shift-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-shift_user} -d ${DB_NAME:-shift_bidding}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for session storage and caching
  redis:
    image: redis:7-alpine
    container_name: shift-bidding-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - shift-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_change_in_production}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: shift-bidding-app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${DB_USER:-shift_user}:${DB_PASSWORD:-shift_password_change_in_production}@postgres:5432/${DB_NAME:-shift_bidding}
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-your-secret-key-minimum-32-characters-long-change-in-production}
      - REDIS_URL=redis://default:${REDIS_PASSWORD:-redis_password_change_in_production}@redis:6379
      - RESEND_API_KEY=${RESEND_API_KEY}
      - RESEND_FROM_EMAIL=${RESEND_FROM_EMAIL:-noreply@yourdomain.com}
      - NEXT_PUBLIC_WEBSOCKET_URL=ws://${HOST:-localhost}:3001
    ports:
      - "${APP_PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - shift-network
    volumes:
      - app_uploads:/app/uploads
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # WebSocket Server
  websocket:
    build:
      context: .
      dockerfile: Dockerfile.websocket
    container_name: shift-bidding-websocket
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${DB_USER:-shift_user}:${DB_PASSWORD:-shift_password_change_in_production}@postgres:5432/${DB_NAME:-shift_bidding}
      - NEXT_PUBLIC_APP_URL=${NEXTAUTH_URL:-http://localhost:3000}
      - WEBSOCKET_PORT=3001
    ports:
      - "${WEBSOCKET_PORT:-3001}:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - shift-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: shift-bidding-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
      - websocket
    networks:
      - shift-network

  # Database backup service
  db-backup:
    image: postgres:15-alpine
    container_name: shift-bidding-backup
    restart: unless-stopped
    environment:
      - PGUSER=${DB_USER:-shift_user}
      - PGPASSWORD=${DB_PASSWORD:-shift_password_change_in_production}
      - PGDATABASE=${DB_NAME:-shift_bidding}
      - PGHOST=postgres
    volumes:
      - ./backups:/backups
      - ./docker/backup/backup.sh:/usr/local/bin/backup.sh:ro
    networks:
      - shift-network
    depends_on:
      postgres:
        condition: service_healthy
    command: |
      sh -c "
        chmod +x /usr/local/bin/backup.sh
        echo '0 2 * * * /usr/local/bin/backup.sh' | crontab -
        crond -f
      "

volumes:
  postgres_data:
  redis_data:
  app_uploads:
  nginx_logs:

networks:
  shift-network:
    driver: bridge