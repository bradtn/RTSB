'use client';

import React, { useState, useEffect, useRef } from 'react';
import { useSession } from 'next-auth/react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useParams } from 'next/navigation';
import { useTranslation } from '@/lib/i18n';
import BidLineCard from '@/components/BidLine/BidLineCard';
import Header from '@/components/Layout/Header';
import { Search, Filter, RefreshCw, ChevronDown, ChevronRight, X } from 'lucide-react';
import toast from 'react-hot-toast';
import { initSocket, subscribeToLineUpdates, subscribeToNotifications, emitLineUpdate, BidLineUpdateData, NotificationData } from '@/lib/socket';
import ActivityTicker from '@/components/BidLine/ActivityTicker';
import AdminNotificationModal from '@/components/Admin/AdminNotificationModal';
import DayOffRequestsSection from '@/components/BidLine/DayOffRequestsSection';

interface BidLinesClientProps {
  locale: string;
  translations: {
    // Header translations
    appTitle: string;
    navHome: string;
    navAdmin: string;
    navLogin: string;
    navLogout: string;
    // Page translations
    navBidLines: string;
    appDescription: string;
    operationsTitle: string;
    commonAll: string;
    bidLineSearch: string;
    showAvailable: string;
    showFavorites: string;
    commonLive: string;
    noData: string;
    // BidLineCard translations
    favoriteRemoved: string;
    favoriteAdded: string;
    changesError: string;
    lineClaimedSuccess: string;
    lineClaimedError: string;
    bidLineNumber: string;
    bidLineClaim: string;
    // Status translations
    bidLineAvailable: string;
    bidLineTaken: string;
    bidLineBlackedOut: string;
    // Days translations
    daysMon: string;
    daysTue: string;
    daysWed: string;
    daysThu: string;
    daysFri: string;
    daysSat: string;
    daysSun: string;
    // Structured translation groups
    bidLine: {
      expandAll: string;
      collapseAll: string;
      searchLines: string;
      searchPlaceholder: string;
      found: string;
      of: string;
      lines: string;
      noMatches: string;
      operations: string;
      total: string;
    };
    scheduleMetrics: {
      title: string;
      weekendsWorking: string;
      saturdays: string;
      sundays: string;
      fiveDayBlocks: string;
      fourDayBlocks: string;
      holidays: string;
      available: string;
      assigned: string;
      blackedOut: string;
      allStatus: string;
      status: string;
      whatThisMeans: string;
      whyItMatters: string;
      completeScheduleSummary: string;
      close: string;
      weekendsDescription: string;
      saturdaysDescription: string;
      sundaysDescription: string;
      fiveDayBlocksDescription: string;
      fourDayBlocksDescription: string;
      holidaysDescription: string;
      weekendsExplanation: string;
      saturdaysExplanation: string;
      sundaysExplanation: string;
      fiveDayBlocksExplanation: string;
      fourDayBlocksExplanation: string;
      holidaysExplanation: string;
      holidaysWorking: string;
      holidaysOff: string;
      workingShift: string;
      dayOff: string;
    };
    common: {
      save: string;
      clear: string;
    };
    dayOffRequests: {
      title: string;
      description: string;
      selectDates: string;
      notes: string;
      notesPlaceholder: string;
      saving: string;
      saved: string;
      cleared: string;
      error: string;
    };
    dayOffMatch: {
      title: string;
      matchWith: string;
      totalRequested: string;
      daysOffMatch: string;
      conflicts: string;
      conflictingDays: string;
      matchingDays: string;
      conflictDescription: string;
      matchDescription: string;
      allPreserved: string;
      infoNote: string;
      close: string;
    };
  };
}

export default function BidLinesClient({ locale, translations }: BidLinesClientProps) {
  const { data: session } = useSession();
  const queryClient = useQueryClient();
  const params = useParams();
  const { t } = useTranslation(params.locale as string);
  const [selectedOperation, setSelectedOperation] = useState<string>('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategories, setSelectedCategories] = useState<string[]>([]);
  const [categoryFilterMode, setCategoryFilterMode] = useState<'OR' | 'AND'>('OR');
  
  // Cache unfiltered counts to show true totals in quick filter buttons
  const [unfilteredCounts, setUnfilteredCounts] = useState<{[operation: string]: {available: number, taken: number, blackedOut: number, total: number}}>({});
  const [selectedStatus, setSelectedStatus] = useState<string>('all');
  const [sortBy, setSortBy] = useState<string>('default'); // default, dayOffMatch, lineNumber
  const [expandedOperations, setExpandedOperations] = useState<Set<string>>(new Set());
  const [operationSearchTerms, setOperationSearchTerms] = useState<Record<string, string>>({});
  const [isFavoritesExpanded, setIsFavoritesExpanded] = useState(false); // Start collapsed
  const [favoritesSearchTerm, setFavoritesSearchTerm] = useState('');
  const [isFiltersExpanded, setIsFiltersExpanded] = useState(true); // Start expanded
  
  // Activity ticker ref
  const activityTickerRef = useRef<{ addMessage: (data: BidLineUpdateData) => void }>(null);

  // Single combined API call for all dashboard data
  const { data: dashboardData, isLoading, refetch } = useQuery({
    queryKey: ['dashboard', selectedOperation, searchTerm, selectedStatus, selectedCategories, categoryFilterMode],
    queryFn: async () => {
      const params = new URLSearchParams({
        operation: selectedOperation,
        search: searchTerm,
        status: selectedStatus,
        categories: selectedCategories.join(','),
        categoryMode: categoryFilterMode,
      });
      // Add timestamp to bypass cache after mutations
      const timestamp = queryClient.getQueryData(['cache-bust-timestamp']);
      if (timestamp) {
        params.append('_t', String(timestamp));
      }
      const res = await fetch(`/api/dashboard?${params}`, {
        headers: timestamp ? { 'x-cache-bust': 'true' } : {}
      });
      if (!res.ok) throw new Error('Failed to fetch dashboard data');
      return res.json();
    },
  });

  // Extract data from the combined response
  const bidLines = dashboardData?.bidLines || [];
  const favoriteBidLines = dashboardData?.favorites || [];
  const operations = dashboardData?.operations || [];
  const allBidLines = bidLines; // All bid lines are now in the main bidLines array
  const statusCounts = dashboardData?.statusCounts || { AVAILABLE: 0, TAKEN: 0, BLACKED_OUT: 0, total: 0 };
  
  // Monitor actual data and reset filter when it becomes empty
  useEffect(() => {
    if (selectedStatus !== 'all' && !isLoading && dashboardData) {
      const currentFilterCount = statusCounts[selectedStatus] || 0;
      console.log(`Debug (useEffect): selectedStatus='${selectedStatus}', currentFilterCount=${currentFilterCount}, statusCounts=`, statusCounts);
      if (currentFilterCount === 0 && statusCounts.total > 0) {
        console.log(`Filter '${selectedStatus}' is empty but total > 0, resetting to 'all'`);
        setSelectedStatus('all');
      }
    }
  }, [selectedStatus, statusCounts, isLoading, dashboardData]);
  
  // Cache unfiltered counts when we have complete data (status = 'all')
  useEffect(() => {
    if (selectedStatus === 'all' && bidLines && bidLines.length > 0) {
      const operationCounts: {[operation: string]: {available: number, taken: number, blackedOut: number, total: number}} = {};
      
      // Group by operation and count
      bidLines.forEach((line: any) => {
        const operationName = line.operation?.name || 'Unknown Operation';
        if (!operationCounts[operationName]) {
          operationCounts[operationName] = { available: 0, taken: 0, blackedOut: 0, total: 0 };
        }
        
        operationCounts[operationName].total++;
        if (line.status === 'AVAILABLE') operationCounts[operationName].available++;
        else if (line.status === 'TAKEN') operationCounts[operationName].taken++;
        else if (line.status === 'BLACKED_OUT') operationCounts[operationName].blackedOut++;
      });
      
      setUnfilteredCounts(operationCounts);
    }
  }, [selectedStatus, bidLines]);

  // Extract bid period start date from any bid line (they should all have the same bid period)
  const bidPeriodStartDate = bidLines?.length > 0 
    ? (bidLines[0]?.bidPeriod?.startDate || bidLines[0]?.schedule?.bidPeriod?.startDate)
    : null;

  // Removed aggressive auto-clear logic that was resetting filters when users explicitly selected a status
  // Users should be able to see empty state with their selected filter rather than having it auto-reset
  // This was causing the issue where clicking "assigned" would immediately reset to "all" when no assigned items exist

  const favoriteMutation = useMutation({
    mutationFn: async ({ bidLineId, favoriteId, isFavorited }: { bidLineId: string; favoriteId?: string; isFavorited: boolean }) => {
      console.log('Favorite mutation called for:', bidLineId, 'currently favorited:', isFavorited);
      
      // Use the faster /api/bid-lines/[id]/favorite endpoint that handles both add and remove
      const res = await fetch(`/api/bid-lines/${bidLineId}/favorite`, {
        method: 'POST',
      });
      
      if (!res.ok) {
        console.error('Favorite API failed:', res.status, res.statusText);
        throw new Error('Failed to toggle favorite');
      }
      
      const data = await res.json();
      console.log('Favorite API response:', data);
      
      return { 
        action: data.favorited ? 'added' : 'removed', 
        bidLineId, 
        data: data.data,
        favorited: data.favorited 
      };
    },
    onSuccess: async (result) => {
      console.log('Favorite mutation success:', result);
      
      // Set a timestamp to force cache-busting on next query
      queryClient.setQueryData(['cache-bust-timestamp'], Date.now());
      
      // Invalidate and refetch the dashboard data
      const queryKey = ['dashboard', selectedOperation, searchTerm, selectedStatus];
      queryClient.invalidateQueries({ queryKey });
      
      // Clear the timestamp after a short delay
      setTimeout(() => {
        queryClient.setQueryData(['cache-bust-timestamp'], null);
      }, 1000);
    },
    onError: (error) => {
      console.error('Favorite mutation error:', error);
    },
  });

  const claimMutation = useMutation({
    mutationFn: async (bidLineId: string) => {
      const res = await fetch(`/api/bid-lines/${bidLineId}/claim`, {
        method: 'POST',
      });
      if (!res.ok) throw new Error('Failed to claim line');
      return { ...await res.json(), bidLineId };
    },
    onSuccess: async (result) => {
      console.log('Claim mutation success:', result);
      
      // Optimistically update the query data immediately
      queryClient.setQueryData(['dashboard'], (oldData: any) => {
        if (!oldData) return oldData;
        
        const newData = { ...oldData };
        
        // Update the bid line in bidLines array to mark as TAKEN
        newData.bidLines = oldData.bidLines.map((line: any) => {
          if (line.id === result.bidLineId) {
            return { 
              ...line, 
              status: 'TAKEN',
              takenBy: session?.user?.name || 'You',
              takenAt: new Date().toISOString()
            };
          }
          return line;
        });
        
        // Update status counts
        if (newData.statusCounts) {
          newData.statusCounts.AVAILABLE = Math.max(0, (newData.statusCounts.AVAILABLE || 0) - 1);
          newData.statusCounts.TAKEN = (newData.statusCounts.TAKEN || 0) + 1;
        }
        
        return newData;
      });
      
      // Fetch fresh data with cache-busting after a brief delay
      setTimeout(async () => {
        const params = new URLSearchParams({
          operation: selectedOperation,
          search: searchTerm,
          status: selectedStatus,
        });
        await fetch(`/api/dashboard?${params.toString()}`, {
          headers: { 'x-cache-bust': 'true' }
        }).then(() => {
          queryClient.invalidateQueries({ queryKey: ['dashboard'] });
        });
      }, 100);
    },
    onError: (error) => {
      console.error('Claim mutation error:', error);
    },
  });

  const manageMutation = useMutation({
    mutationFn: async ({ bidLineId, action, data }: { bidLineId: string; action: string; data?: any }) => {
      const res = await fetch(`/api/bid-lines/${bidLineId}/manage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ action, ...data }),
      });
      if (!res.ok) throw new Error(`Failed to ${action} line`);
      return { ...await res.json(), bidLineId, action };
    },
    onSuccess: async (result) => {
      console.log('Manage mutation success:', result);
      
      // Optimistically update the query data immediately
      queryClient.setQueryData(['dashboard', selectedOperation, searchTerm, selectedStatus], (oldData: any) => {
        if (!oldData) return oldData;
        
        const newData = { ...oldData };
        
        // Update the bid line based on the action
        newData.bidLines = oldData.bidLines.map((line: any) => {
          if (line.id === result.bidLineId) {
            const updatedLine = { ...line };
            
            switch (result.action) {
              case 'release':
                updatedLine.status = 'AVAILABLE';
                updatedLine.takenBy = null;
                updatedLine.takenAt = null;
                break;
              case 'blackout':
                updatedLine.status = 'BLACKED_OUT';
                updatedLine.takenBy = null;
                updatedLine.takenAt = null;
                break;
              case 'assign':
                updatedLine.status = 'TAKEN';
                updatedLine.takenBy = result.assignedTo || 'Assigned';
                updatedLine.takenAt = new Date().toISOString();
                break;
              default:
                // For other actions, use the returned data
                Object.assign(updatedLine, result);
            }
            
            return updatedLine;
          }
          return line;
        });
        
        // Update status counts based on action
        if (newData.statusCounts) {
          const oldLine = oldData.bidLines.find((line: any) => line.id === result.bidLineId);
          if (oldLine) {
            // Decrement old status count
            if (newData.statusCounts[oldLine.status] !== undefined) {
              newData.statusCounts[oldLine.status] = Math.max(0, (newData.statusCounts[oldLine.status] || 0) - 1);
            }
            
            // Increment new status count
            const newStatus = result.action === 'release' ? 'AVAILABLE' : 
                            result.action === 'blackout' ? 'BLACKED_OUT' : 
                            result.action === 'assign' ? 'TAKEN' : oldLine.status;
            
            // Initialize count to 0 if it doesn't exist, then increment
            if (newData.statusCounts[newStatus] !== undefined) {
              newData.statusCounts[newStatus] = (newData.statusCounts[newStatus] || 0) + 1;
            } else {
              newData.statusCounts[newStatus] = 1;
            }
            
            console.log(`Debug (optimistic): action=${result.action}, oldStatus=${oldLine.status}, newStatus=${newStatus}, statusCounts=`, newData.statusCounts);
            
            // Check if current filter becomes empty and reset to 'all' if so
            if (selectedStatus !== 'all') {
              const currentFilterCount = newData.statusCounts[selectedStatus] || 0;
              console.log(`Debug (optimistic): selectedStatus='${selectedStatus}', currentFilterCount=${currentFilterCount}, statusCounts=`, newData.statusCounts);
              if (currentFilterCount === 0) {
                console.log(`Filter '${selectedStatus}' became empty, resetting to 'all'`);
                setSelectedStatus('all');
              }
            }
          }
        }
        
        return newData;
      });
      
      // Fetch fresh data with cache-busting after a brief delay
      setTimeout(async () => {
        const params = new URLSearchParams({
          operation: selectedOperation,
          search: searchTerm,
          status: selectedStatus,
        });
        await fetch(`/api/dashboard?${params.toString()}`, {
          headers: { 'x-cache-bust': 'true' }
        }).then(async (res) => {
          queryClient.invalidateQueries({ queryKey: ['dashboard'] });
          
          // Double-check filter reset after fresh data
          if (selectedStatus !== 'all' && res.ok) {
            const freshData = await res.json();
            const currentFilterCount = freshData.statusCounts?.[selectedStatus] || 0;
            console.log(`Debug (after fresh data): selectedStatus='${selectedStatus}', currentFilterCount=${currentFilterCount}`);
            if (currentFilterCount === 0) {
              console.log(`Filter '${selectedStatus}' still empty after fresh data, resetting to 'all'`);
              setSelectedStatus('all');
            }
          }
        });
      }, 100);
    },
    onError: (error) => {
      console.error('Manage mutation error:', error);
    },
  });

  // WebSocket initialization for real-time updates
  useEffect(() => {
    if (!session?.user?.id) return;
    
    // For HTTPS production, use polling instead of WebSocket
    if (typeof window !== 'undefined' && window.location.protocol === 'https:') {
      console.log('Using polling for HTTPS production environment');
      
      // Poll for updates every 5 seconds in production for near real-time experience
      const pollInterval = setInterval(() => {
        queryClient.invalidateQueries({ queryKey: ['dashboard'] });
      }, 5000);
      
      return () => clearInterval(pollInterval);
    }

    console.log('Initializing WebSocket for user:', session.user.id);
    const socket = initSocket();
    
    // Subscribe to real-time bid line updates
    const unsubscribeLineUpdates = subscribeToLineUpdates((data: BidLineUpdateData) => {
      console.log('Real-time bid line update received:', data);
      
      // Add to activity ticker
      if (activityTickerRef.current) {
        activityTickerRef.current.addMessage(data);
      }
      
      // Invalidate queries to refresh data immediately
      queryClient.invalidateQueries({ queryKey: ['dashboard'] });
      
      // Show toast notification for status changes
      if (data.status === 'TAKEN') {
        toast.success(`Line ${data.lineNumber} has been taken by ${data.takenBy || 'someone'}`, {
          duration: 4000,
        });
      } else if (data.status === 'AVAILABLE') {
        toast(`Line ${data.lineNumber} is now available`, {
          duration: 4000,
          icon: 'ℹ️',
        });
      }
    });

    // Subscribe to user notifications
    const unsubscribeNotifications = subscribeToNotifications(session.user.id, (data: NotificationData) => {
      console.log('Real-time notification received:', data);
      
      // Show notification toast
      if (data.type === 'LINE_TAKEN') {
        toast.error(data.message, {
          duration: 6000,
        });
      } else {
        toast(data.message, {
          duration: 4000,
          icon: 'ℹ️',
        });
      }
    });

    // Cleanup on unmount
    return () => {
      unsubscribeLineUpdates();
      unsubscribeNotifications();
    };
  }, [session?.user?.id, queryClient]);

  const handleFavoriteToggle = async (bidLineId: string, favoriteId?: string, isFavorited?: boolean) => {
    await favoriteMutation.mutateAsync({ 
      bidLineId, 
      favoriteId, 
      isFavorited: isFavorited || false 
    });
  };

  const handleClaim = async (bidLineId: string) => {
    // Find the bid line to get its details before claiming
    const bidLine = bidLines?.find((line: any) => line.id === bidLineId);
    
    try {
      const result = await claimMutation.mutateAsync(bidLineId);
      
      // Emit real-time update after successful claim
      if (bidLine && session?.user) {
        const updateData = {
          bidLineId,
          lineNumber: bidLine.lineNumber,
          status: 'TAKEN' as const,
          takenBy: session.user.name || session.user.email,
          takenAt: new Date().toISOString(),
          claimedBy: session.user.id,
        };
        
        emitLineUpdate(updateData);
        
        // Also add to local ticker immediately
        if (activityTickerRef.current) {
          activityTickerRef.current.addMessage(updateData);
        }
      }
      
      return result;
    } catch (error) {
      console.error('Failed to claim line:', error);
      throw error;
    }
  };

  const handleManage = async (bidLineId: string, action: 'assign' | 'release' | 'blackout', data?: any) => {
    // Find the bid line to get its details
    const bidLine = bidLines?.find((line: any) => line.id === bidLineId);
    
    try {
      const result = await manageMutation.mutateAsync({ bidLineId, action, data });
      
      // Emit real-time update after successful management action
      if (bidLine) {
        let newStatus: 'AVAILABLE' | 'TAKEN' | 'BLACKED_OUT' = 'AVAILABLE';
        let takenBy: string | undefined;
        
        if (action === 'assign' && data?.officerName) {
          newStatus = 'TAKEN';
          takenBy = data.officerName;
        } else if (action === 'blackout') {
          newStatus = 'BLACKED_OUT';
        } else if (action === 'release') {
          newStatus = 'AVAILABLE';
        }
        
        // Add to local ticker immediately for instant feedback
        // The server will also emit a WebSocket update for other clients
        const updateData = {
          bidLineId,
          lineNumber: bidLine.lineNumber,
          status: newStatus,
          takenBy,
          takenAt: newStatus === 'TAKEN' ? new Date().toISOString() : undefined,
          operationName: bidLine.operation?.name,
        };
        
        if (activityTickerRef.current) {
          activityTickerRef.current.addMessage(updateData);
        }
      }
      
      return result;
    } catch (error) {
      console.error(`Failed to ${action} line:`, error);
      throw error;
    }
  };

  const canClaimLines = false; // Self-bidding disabled - officers cannot claim lines directly
  
  const isAdmin = !!session?.user?.role && ['SUPER_ADMIN', 'SUPERVISOR'].includes(session.user.role);

  // Store day-off match data for all lines
  const [dayOffMatches, setDayOffMatches] = useState<Record<string, any>>(() => {
    // Try to load from localStorage on initial mount
    if (typeof window !== 'undefined' && session?.user?.id) {
      const cached = localStorage.getItem('dayOffMatches');
      if (cached) {
        try {
          const parsed = JSON.parse(cached);
          // Check if cache is still valid (24 hours) and for the same user
          if (parsed.timestamp && 
              Date.now() - parsed.timestamp < 24 * 60 * 60 * 1000 &&
              parsed.userId === session.user.id) {
            return parsed.data || {};
          }
        } catch (e) {
          console.error('Failed to parse cached day-off matches:', e);
        }
      }
    }
    return {};
  });
  const [isLoadingDayOffMatches, setIsLoadingDayOffMatches] = useState(false);
  const [userHasDayOffRequests, setUserHasDayOffRequests] = useState<boolean | null>(null);

  // Check once if user has day-off requests
  useEffect(() => {
    const checkUserDayOffRequests = async () => {
      if (!session?.user) {
        setUserHasDayOffRequests(false);
        return;
      }

      try {
        const res = await fetch('/api/day-off-requests/check');
        if (res.ok) {
          const data = await res.json();
          setUserHasDayOffRequests(data.hasRequests);
        } else {
          setUserHasDayOffRequests(false);
        }
      } catch (error) {
        console.error('Failed to check day-off requests:', error);
        setUserHasDayOffRequests(false);
      }
    };

    checkUserDayOffRequests();
  }, [session?.user]);

  // Fetch day-off match data for all bid lines (only if user has day-off requests)
  useEffect(() => {
    // Skip if we haven't checked yet whether user has day-off requests
    if (userHasDayOffRequests === null) {
      return;
    }
    
    // Skip if user doesn't have day-off requests
    if (userHasDayOffRequests === false) {
      return;
    }
    
    // Skip if no bidLines or session
    if (!bidLines || bidLines.length === 0 || !session?.user) {
      return;
    }
    
    // Skip if we already have cached data (it was loaded from localStorage)
    if (Object.keys(dayOffMatches).length > 0) {
      return;
    }
    
    const fetchAllDayOffMatches = async () => {
      
      setIsLoadingDayOffMatches(true);
      try {
        const matches: Record<string, any> = {};
        
        // Fetch matches for all bid lines in smaller batches for better performance
        const batchSize = 10;
        for (let i = 0; i < bidLines.length; i += batchSize) {
          const batch = bidLines.slice(i, i + batchSize);
          
          await Promise.all(
            batch.map(async (bidLine: any) => {
              try {
                const res = await fetch('/api/day-off-requests/calculate-matches', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({ bidLineId: bidLine.id }),
                });
                
                if (res.ok) {
                  const data = await res.json();
                  if (data.hasRequests) {
                    matches[bidLine.id] = data;
                  }
                }
              } catch (error) {
                console.error(`Failed to fetch day-off match for line ${bidLine.lineNumber}:`, error);
              }
            })
          );
          
          // Update state after each batch for progressive loading
          setDayOffMatches(prev => ({ ...prev, ...matches }));
        }
        
        // After all batches, save final result to localStorage
        if (typeof window !== 'undefined' && session?.user?.id) {
          try {
            localStorage.setItem('dayOffMatches', JSON.stringify({
              data: matches,
              timestamp: Date.now(),
              userId: session.user.id
            }));
          } catch (e) {
            console.error('Failed to cache day-off matches:', e);
          }
        }
      } catch (error) {
        console.error('Failed to fetch day-off matches:', error);
      } finally {
        setIsLoadingDayOffMatches(false);
      }
    };

    fetchAllDayOffMatches();
  }, [bidLines?.length, session?.user?.id, userHasDayOffRequests]);

  // Listen for day-off requests updates to refresh match data
  useEffect(() => {
    const handleDayOffUpdate = () => {
      // First, re-check if user has day-off requests
      const checkAndFetchMatches = async () => {
        if (!session?.user) return;

        // Clear localStorage cache when day-off requests are updated
        if (typeof window !== 'undefined') {
          localStorage.removeItem('dayOffMatches');
        }

        // Re-check user's day-off request status
        try {
          const res = await fetch('/api/day-off-requests/check');
          if (res.ok) {
            const data = await res.json();
            setUserHasDayOffRequests(data.hasRequests);
            
            // If user no longer has requests, clear matches and return
            if (!data.hasRequests) {
              setDayOffMatches({});
              setIsLoadingDayOffMatches(false);
              return;
            }
          }
        } catch (error) {
          console.error('Failed to check day-off requests:', error);
          return;
        }

        // Re-fetch day-off match data when requests are updated (using same batched approach)
        if (!bidLines) return;
        
        setIsLoadingDayOffMatches(true);
        try {
          const matches: Record<string, any> = {};
          
          // Use same batched approach for consistency
          const batchSize = 10;
          for (let i = 0; i < bidLines.length; i += batchSize) {
            const batch = bidLines.slice(i, i + batchSize);
            
            await Promise.all(
              batch.map(async (bidLine: any) => {
                try {
                  const res = await fetch('/api/day-off-requests/calculate-matches', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ bidLineId: bidLine.id }),
                  });
                  
                  if (res.ok) {
                    const data = await res.json();
                    if (data.hasRequests) {
                      matches[bidLine.id] = data;
                    }
                    // Note: if !data.hasRequests, we intentionally don't add to matches
                    // which will effectively clear that bid line's match data
                  }
                } catch (error) {
                  console.error(`Failed to fetch day-off match for line ${bidLine.lineNumber}:`, error);
                }
              })
            );
          }
          
          // Replace entire matches state instead of merging to clear removed matches
          setDayOffMatches(matches);
          
          // Save updated matches to localStorage
          if (typeof window !== 'undefined' && session?.user?.id) {
            try {
              localStorage.setItem('dayOffMatches', JSON.stringify({
                data: matches,
                timestamp: Date.now(),
                userId: session.user.id
              }));
            } catch (e) {
              console.error('Failed to cache updated day-off matches:', e);
            }
          }
        } catch (error) {
          console.error('Failed to fetch day-off matches:', error);
        } finally {
          setIsLoadingDayOffMatches(false);
        }
      };

      checkAndFetchMatches();
    };

    // Add event listener
    window.addEventListener('dayOffRequestsUpdated', handleDayOffUpdate);

    // Cleanup
    return () => {
      window.removeEventListener('dayOffRequestsUpdated', handleDayOffUpdate);
    };
  }, [bidLines, session?.user]);

  // Natural sort function for line numbers
  const naturalSort = (a: string, b: string): number => {
    return a.localeCompare(b, undefined, { 
      numeric: true, 
      sensitivity: 'base',
      caseFirst: 'upper'
    });
  };

  // Group bid lines by operation
  const groupedBidLines = React.useMemo(() => {
    if (!bidLines) return {};
    
    const grouped: { [operationName: string]: any[] } = {};
    
    bidLines.forEach((bidLine: any) => {
      const operationName = bidLine.operation?.name || 'Unknown Operation';
      if (!grouped[operationName]) {
        grouped[operationName] = [];
      }
      grouped[operationName].push(bidLine);
    });
    
    // Sort each operation's lines based on selected sort option
    Object.keys(grouped).forEach(operationName => {
      grouped[operationName].sort((a: any, b: any) => {
        if (sortBy === 'dayOffMatch') {
          // Sort by day-off match percentage (highest first)
          const aMatch = dayOffMatches[a.id];
          const bMatch = dayOffMatches[b.id];
          
          // Lines with day-off requests come first
          if (aMatch && !bMatch) return -1;
          if (!aMatch && bMatch) return 1;
          
          // If both have matches, sort by percentage (highest first)
          if (aMatch && bMatch) {
            const diff = bMatch.matchPercentage - aMatch.matchPercentage;
            if (diff !== 0) return diff;
          }
          
          // Fall back to status then line number
          if (a.status !== b.status) {
            if (a.status === 'AVAILABLE') return -1;
            if (b.status === 'AVAILABLE') return 1;
            return a.status.localeCompare(b.status);
          }
          return naturalSort(a.lineNumber, b.lineNumber);
        } else {
          // Default sorting: status first, then line number
          if (a.status !== b.status) {
            if (a.status === 'AVAILABLE') return -1;
            if (b.status === 'AVAILABLE') return 1;
            return a.status.localeCompare(b.status);
          }
          return naturalSort(a.lineNumber, b.lineNumber);
        }
      });
    });
    
    return grouped;
  }, [bidLines, naturalSort, sortBy, dayOffMatches]);

  const toggleOperation = (operationName: string) => {
    setExpandedOperations(prev => {
      const newSet = new Set(prev);
      if (newSet.has(operationName)) {
        newSet.delete(operationName);
      } else {
        newSet.add(operationName);
      }
      return newSet;
    });
  };

  const expandAll = () => {
    setExpandedOperations(new Set(Object.keys(groupedBidLines)));
  };

  const collapseAll = () => {
    setExpandedOperations(new Set());
  };

  const clearFilters = () => {
    setSelectedOperation('all');
    setSearchTerm('');
    setSelectedStatus('all');
    setSortBy('default');
    setOperationSearchTerms({});
    setSelectedCategories([]);
    setCategoryFilterMode('OR');
  };

  const filterOperationLines = (operationBidLines: any[], operationName: string) => {
    const searchTerm = operationSearchTerms[operationName]?.toLowerCase() || '';
    if (!searchTerm) return operationBidLines;

    return operationBidLines.filter((line: any) => 
      line.lineNumber.toLowerCase().includes(searchTerm) ||
      line.location?.toLowerCase().includes(searchTerm) ||
      line.description?.toLowerCase().includes(searchTerm) ||
      line.takenBy?.toLowerCase().includes(searchTerm)
    );
  };

  const filterFavoriteLines = (favoriteLines: any[]) => {
    const searchTerm = favoritesSearchTerm.toLowerCase();
    if (!searchTerm) return favoriteLines;

    return favoriteLines.filter((line: any) => 
      line.lineNumber.toLowerCase().includes(searchTerm) ||
      line.location?.toLowerCase().includes(searchTerm) ||
      line.description?.toLowerCase().includes(searchTerm) ||
      line.takenBy?.toLowerCase().includes(searchTerm) ||
      line.operation?.name?.toLowerCase().includes(searchTerm)
    );
  };

  return (
    <>
      <Header
        locale={locale}
        translations={{
          appTitle: translations.appTitle,
          navHome: translations.navHome,
          navBidLines: translations.navBidLines,
          
          navAdmin: translations.navAdmin,
          navLogin: translations.navLogin,
          navLogout: translations.navLogout,
        }}
      />
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 dark:from-gray-900 dark:via-gray-900 dark:to-gray-800">
        <div className="container mx-auto max-w-7xl px-1 sm:px-6 lg:px-8 py-2 sm:py-8">
        <div className="mb-6 sm:mb-8 text-center">
          <h1 className="text-2xl sm:text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent dark:from-blue-400 dark:to-purple-400 transition-all duration-500 hover:scale-105 cursor-default">{translations.navBidLines}</h1>
          <p className="mt-2 sm:mt-3 text-base sm:text-lg text-gray-600 dark:text-gray-300 transition-colors duration-300 hover:text-gray-800 dark:hover:text-gray-100">{translations.appDescription}</p>
        </div>

        {/* Real-time Activity Ticker */}
        <div className="mb-6 rounded-lg overflow-hidden shadow-lg">
          <ActivityTicker 
            ref={activityTickerRef}
            className="w-full"
            locale={locale}
          />
        </div>

        {/* Day-Off Requests Section */}
        {session?.user && (
          <div className="mb-6 bg-gradient-to-r from-purple-50 to-indigo-50 dark:from-purple-900/20 dark:to-indigo-900/20 backdrop-blur-sm rounded-xl border border-purple-200/50 dark:border-purple-700/50 shadow-lg hover:shadow-xl transition-all duration-300">
            <DayOffRequestsSection 
              locale={locale}
              translations={translations.dayOffRequests}
              bidPeriodStartDate={bidPeriodStartDate}
            />
            {isLoadingDayOffMatches && (
              <div className="px-6 pb-4">
                <div className="flex items-center gap-2 text-sm text-purple-600 dark:text-purple-400">
                  <div className="animate-spin rounded-full h-4 w-4 border-2 border-purple-600 border-t-transparent"></div>
                  Calculating day-off matches...
                </div>
              </div>
            )}
          </div>
        )}

        {/* {t('common.filterOptions')} */}
        <div className="bg-white/70 backdrop-blur-sm dark:bg-gray-800/90 rounded-xl shadow-lg border border-white/20 dark:border-gray-700 mb-4 sm:mb-8 transition-all duration-300">
          {/* Mobile: Collapsible filter header */}
          <div className="sm:hidden">
            <div className="w-full px-3 py-4 flex items-center justify-between hover:bg-gray-100/50 dark:hover:bg-gray-700/50 transition-all duration-300 rounded-t-xl group">
              <button
                onClick={() => setIsFiltersExpanded(!isFiltersExpanded)}
                className="flex items-center gap-2 flex-1"
              >
                <ChevronRight 
                  className={`h-4 w-4 text-blue-600 dark:text-blue-400 transition-all duration-300 ${
                    isFiltersExpanded ? 'rotate-90' : 'rotate-0'
                  }`} 
                />
                <Filter className="h-4 w-4 text-blue-600 dark:text-blue-400" />
                <h2 className="text-sm font-semibold text-gray-800 dark:text-gray-200">{t('common.filterOptions')}</h2>
              </button>
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  clearFilters();
                }}
                className="text-xs px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 rounded-md hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
              >
                Clear
              </button>
            </div>
            
            {isFiltersExpanded && (
              <div className="px-3 pb-3 flex flex-col gap-3 border-t border-gray-200 dark:border-gray-600 pt-3">
            
            {/* Compact mobile filter controls */}
            <div className="flex flex-wrap gap-2">
              <select
                value={selectedOperation}
                onChange={(e) => setSelectedOperation(e.target.value)}
                className="flex-1 min-w-0 py-2 px-3 text-sm rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
              >
                <option value="all">{t('bidLine.allOperations')}</option>
                {operations?.map((op: any) => (
                  <option key={op.id} value={op.id}>
                    {locale === 'fr' ? op.nameFr : op.nameEn}
                  </option>
                ))}
              </select>
              
              <select
                value={selectedStatus}
                onChange={(e) => setSelectedStatus(e.target.value)}
                className="flex-1 min-w-0 py-2 px-3 text-sm rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
              >
                <option value="all">{t('bidLine.allStatus')}</option>
                <option value="AVAILABLE">{t('bidLine.available')}</option>
                <option value="TAKEN">{t('bidLine.taken')}</option>
                <option value="BLACKED_OUT">{t('bidLine.blackedOut')}</option>
              </select>
            </div>
            
            {/* Mobile categories filter */}
            <div className="bg-gray-50 dark:bg-gray-800/50 rounded-lg p-3 border border-gray-200 dark:border-gray-700">
              <div className="flex items-center justify-between mb-2">
                <div className="flex items-center gap-2">
                  <div className="w-1.5 h-1.5 rounded-full bg-blue-500"></div>
                  <span className="text-xs font-medium text-gray-700 dark:text-gray-300">
                    Shift Categories
                  </span>
                  {selectedCategories.length > 0 && (
                    <span className="text-xs text-gray-500 dark:text-gray-400">
                      ({selectedCategories.length})
                    </span>
                  )}
                </div>
                {selectedCategories.length > 1 && (
                  <div className="flex items-center gap-1.5 bg-white dark:bg-gray-700 px-2 py-1 rounded-md border border-gray-200 dark:border-gray-600">
                    <span className="text-xs text-gray-500 dark:text-gray-400">Match:</span>
                    <button
                      onClick={() => setCategoryFilterMode(categoryFilterMode === 'OR' ? 'AND' : 'OR')}
                      className={`px-2 py-0.5 text-xs font-medium rounded transition-all duration-200 ${
                        categoryFilterMode === 'AND'
                          ? 'bg-purple-100 dark:bg-purple-900/40 text-purple-700 dark:text-purple-300'
                          : 'bg-green-100 dark:bg-green-900/40 text-green-700 dark:text-green-300'
                      }`}
                    >
                      {categoryFilterMode === 'AND' ? 'EXACT' : 'ANY'}
                    </button>
                  </div>
                )}
              </div>
              <div className="flex flex-wrap gap-1.5">
                {['Days', 'Late Days', 'Mid Days', 'Afternoons', 'Midnights'].map(category => (
                  <button
                    key={category}
                    onClick={() => {
                      if (selectedCategories.includes(category)) {
                        setSelectedCategories(selectedCategories.filter(c => c !== category));
                      } else {
                        setSelectedCategories([...selectedCategories, category]);
                      }
                    }}
                    className={`px-2.5 py-1.5 text-xs font-medium rounded-lg border transition-all duration-200 ${
                      selectedCategories.includes(category)
                        ? 'bg-blue-50 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 border-blue-300 dark:border-blue-600 shadow-sm'
                        : 'bg-white dark:bg-gray-700 text-gray-600 dark:text-gray-300 border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-600'
                    }`}
                  >
                    {category}
                  </button>
                ))}
              </div>
              {selectedCategories.length > 0 && (
                <div className="flex items-center justify-between mt-2 pt-2 border-t border-gray-200 dark:border-gray-600">
                  <div className="text-xs text-gray-500 dark:text-gray-400 truncate">
                    {selectedCategories.join(', ')}
                  </div>
                  <button
                    onClick={() => setSelectedCategories([])}
                    className="ml-2 px-2 py-1 text-xs font-medium rounded bg-red-50 dark:bg-red-900/20 text-red-600 dark:text-red-400 border border-red-200 dark:border-red-600 hover:bg-red-100 dark:hover:bg-red-900/40 transition-all duration-200"
                  >
                    Clear
                  </button>
                </div>
              )}
            </div>
            
            <div className="flex flex-wrap gap-2">
              <select
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
                className="flex-1 min-w-0 py-2 px-3 text-sm rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
              >
                <option value="default">Default Sort</option>
                <option value="dayOffMatch">Day-Off Match %</option>
              </select>
            </div>
            
            {/* Mobile search bar */}
            <div className="relative">
              <input
                type="text"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                placeholder={t('bidLine.searchLinesShort')}
                className="w-full pl-8 pr-4 py-2 text-sm rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400"
              />
              <Search className="absolute left-2.5 top-1/2 -translate-y-1/2 h-3.5 w-3.5 text-gray-400" />
              {searchTerm && (
                <button
                  onClick={() => setSearchTerm('')}
                  className="absolute right-2 top-1/2 -translate-y-1/2 p-1 text-gray-400"
                >
                  ×
                </button>
              )}
            </div>
            
            {/* Mobile action buttons */}
            <div className="flex gap-2">
              <button
                onClick={() => refetch()}
                className="ml-auto flex items-center gap-1 px-3 py-1.5 bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400 rounded-lg text-sm"
              >
                <RefreshCw className="h-3.5 w-3.5" />
                {t('common.refresh')}
              </button>
                </div>
              </div>
            )}
          </div>
          
          {/* Desktop: Collapsible filter layout */}
          <div className="hidden sm:block">
            <div className="w-full flex items-center justify-between mb-4 px-6 py-4 hover:bg-gray-100/50 dark:hover:bg-gray-700/50 transition-all duration-300 rounded-xl group">
              <button
                onClick={() => setIsFiltersExpanded(!isFiltersExpanded)}
                className="flex items-center gap-2 group flex-1"
              >
                <ChevronRight 
                  className={`h-5 w-5 text-blue-600 dark:text-blue-400 transition-all duration-300 ${
                    isFiltersExpanded ? 'rotate-90' : 'rotate-0'
                  }`} 
                />
                <Filter className="h-5 w-5 text-blue-600 dark:text-blue-400 transition-all duration-300 group-hover:rotate-12 group-hover:scale-110" />
                <h2 className="text-lg font-semibold text-gray-800 dark:text-gray-200 transition-colors duration-300 group-hover:text-blue-600 dark:group-hover:text-blue-400">{t('common.filterOptions')}</h2>
              </button>
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  clearFilters();
                }}
                className="flex items-center gap-2 px-3 py-1.5 text-sm bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-600 dark:text-gray-300 rounded-lg transition-all duration-300 hover:shadow-md hover:scale-105 transform"
              >
                <X className="h-4 w-4 transition-transform duration-300 hover:rotate-90" />
{t('bidLine.clearAll')}
              </button>
            </div>
            
            {isFiltersExpanded && (
              <div className="px-6 pb-6 border-t border-gray-200 dark:border-gray-600 pt-4">
                {/* Primary Filters Row */}
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 mb-6">
                  <div>
                    <label className="block text-sm font-semibold text-gray-800 dark:text-gray-300 mb-2 transition-colors duration-300 hover:text-blue-600 dark:hover:text-blue-400">
                      Operation
                    </label>
                    <select
                      value={selectedOperation}
                      onChange={(e) => setSelectedOperation(e.target.value)}
                      className="w-full py-3 px-4 rounded-xl border-2 border-gray-200 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 shadow-sm focus:border-blue-500 focus:ring-4 focus:ring-blue-500/20 transition-all duration-300 hover:shadow-md hover:border-blue-300 dark:hover:border-blue-500"
                    >
                      <option value="all">{t('bidLine.allOperations')}</option>
                      {operations?.map((op: any) => (
                        <option key={op.id} value={op.id}>
                          {locale === 'fr' ? op.nameFr : op.nameEn}
                        </option>
                      ))}
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-semibold text-gray-800 dark:text-gray-300 mb-2 transition-colors duration-300 hover:text-blue-600 dark:hover:text-blue-400">
                      Search Lines
              </label>
              <div className="relative group">
                <input
                  type="text"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  placeholder={t('bidLine.searchByDetails')}
                  className="w-full pl-11 pr-4 py-3 rounded-xl border-2 border-gray-200 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400 shadow-sm focus:border-blue-500 focus:ring-4 focus:ring-blue-500/20 transition-all duration-300 hover:shadow-md hover:border-blue-300 dark:hover:border-blue-500"
                />
                <Search className="absolute left-4 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400 dark:text-gray-500 transition-all duration-300 group-hover:text-blue-500 dark:group-hover:text-blue-400 group-hover:scale-110" />
                {searchTerm && (
                  <button
                    onClick={() => setSearchTerm('')}
                    className="absolute right-3 top-1/2 -translate-y-1/2 p-1 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-all duration-300 hover:bg-gray-100 dark:hover:bg-gray-600 rounded-full hover:scale-110"
                  >
                    ×
                  </button>
                )}
              </div>
            </div>

            <div>
              <label className="block text-sm font-semibold text-gray-800 dark:text-gray-300 mb-2 transition-colors duration-300 hover:text-blue-600 dark:hover:text-blue-400">
{t('common.status')}
              </label>
              <select
                value={selectedStatus}
                onChange={(e) => setSelectedStatus(e.target.value)}
                className="w-full py-3 px-4 rounded-xl border-2 border-gray-200 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 shadow-sm focus:border-blue-500 focus:ring-4 focus:ring-blue-500/20 transition-all duration-300 hover:shadow-md hover:border-blue-300 dark:hover:border-blue-500"
              >
                <option value="all">{t('bidLine.allStatus')}</option>
                <option value="AVAILABLE">{t('bidLine.available')}</option>
                <option value="TAKEN">{t('bidLine.taken')}</option>
                <option value="BLACKED_OUT">{t('bidLine.blackedOut')}</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-semibold text-gray-800 dark:text-gray-300 mb-2 transition-colors duration-300 hover:text-blue-600 dark:hover:text-blue-400">
                Sort By
              </label>
              <select
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
                className="w-full py-3 px-4 rounded-xl border-2 border-gray-200 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 shadow-sm focus:border-blue-500 focus:ring-4 focus:ring-blue-500/20 transition-all duration-300 hover:shadow-md hover:border-blue-300 dark:hover:border-blue-500"
              >
                <option value="default">Default (Status + Line #)</option>
                <option value="dayOffMatch">Day-Off Match %</option>
              </select>
            </div>
          </div>

          {/* Shift Categories Section */}
          <div className="bg-gray-50 dark:bg-gray-800/50 rounded-xl p-4 border border-gray-200 dark:border-gray-700">
            <div className="flex items-center justify-between mb-3">
              <div>
                <h3 className="text-sm font-semibold text-gray-800 dark:text-gray-300 flex items-center gap-2">
                  <div className="w-2 h-2 rounded-full bg-blue-500"></div>
                  Shift Categories
                </h3>
                <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                  {selectedCategories.length > 0 ? `${selectedCategories.length} selected` : 'Filter by shift timing categories'}
                </p>
              </div>
              {selectedCategories.length > 1 && (
                <div className="flex items-center gap-2 bg-white dark:bg-gray-700 px-3 py-1.5 rounded-lg border border-gray-200 dark:border-gray-600">
                  <span className="text-xs font-medium text-gray-600 dark:text-gray-400">Match:</span>
                  <button
                    onClick={() => setCategoryFilterMode(categoryFilterMode === 'OR' ? 'AND' : 'OR')}
                    className={`px-3 py-1 text-xs font-medium rounded-md transition-all duration-200 ${
                      categoryFilterMode === 'AND'
                        ? 'bg-purple-100 dark:bg-purple-900/40 text-purple-700 dark:text-purple-300 shadow-sm'
                        : 'bg-green-100 dark:bg-green-900/40 text-green-700 dark:text-green-300 shadow-sm'
                    }`}
                  >
                    {categoryFilterMode === 'AND' ? 'EXACT' : 'ANY'}
                  </button>
                </div>
              )}
            </div>
            
            <div className="flex flex-wrap gap-2">
              {['Days', 'Late Days', 'Mid Days', 'Afternoons', 'Midnights'].map(category => (
                <button
                  key={category}
                  onClick={() => {
                    if (selectedCategories.includes(category)) {
                      setSelectedCategories(selectedCategories.filter(c => c !== category));
                    } else {
                      setSelectedCategories([...selectedCategories, category]);
                    }
                  }}
                  className={`px-3 py-2 text-sm font-medium rounded-lg border-2 transition-all duration-200 hover:scale-105 ${
                    selectedCategories.includes(category)
                      ? 'bg-blue-50 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 border-blue-300 dark:border-blue-600 shadow-sm'
                      : 'bg-white dark:bg-gray-700 text-gray-600 dark:text-gray-300 border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-600 hover:border-gray-400 dark:hover:border-gray-500'
                  }`}
                >
                  {category}
                </button>
              ))}
            </div>
            
            {selectedCategories.length > 0 && (
              <div className="flex items-center justify-between mt-3 pt-3 border-t border-gray-200 dark:border-gray-600">
                <div className="text-xs text-gray-500 dark:text-gray-400">
                  {selectedCategories.join(', ')}
                </div>
                <button
                  onClick={() => setSelectedCategories([])}
                  className="px-3 py-1 text-xs font-medium rounded-md bg-red-50 dark:bg-red-900/20 text-red-600 dark:text-red-400 border border-red-200 dark:border-red-600 hover:bg-red-100 dark:hover:bg-red-900/40 transition-all duration-200"
                >
                  Clear all
                </button>
              </div>
            )}
          </div>

          {/* Actions Row */}
          <div className="flex justify-end">
            <div className="flex gap-3">
                    <button
                      onClick={() => refetch()}
                      className="flex items-center gap-2 px-4 py-2 bg-blue-50 hover:bg-blue-100 dark:bg-blue-900/20 dark:hover:bg-blue-900/40 text-blue-600 dark:text-blue-400 rounded-lg border border-blue-200 dark:border-blue-800 transition-all duration-300 hover:shadow-md hover:scale-105 transform group"
                    >
                      <RefreshCw className="h-4 w-4 transition-transform duration-300 group-hover:rotate-180" />
                      {t('common.refresh')}
                    </button>
            </div>
          </div>
        </div>
      )}
    </div>



        {/* Favorites Section */}
        {session?.user && (
          <div className="mb-6 bg-gradient-to-r from-yellow-50 to-amber-50 dark:from-yellow-900/20 dark:to-amber-900/20 backdrop-blur-sm rounded-xl border border-yellow-200/50 dark:border-yellow-700/50 shadow-lg hover:shadow-xl transition-all duration-300">
            {/* Favorites Header */}
            <button
              onClick={() => setIsFavoritesExpanded(!isFavoritesExpanded)}
              className="w-full px-4 sm:px-6 py-3 sm:py-4 flex items-center justify-between hover:bg-yellow-100/50 dark:hover:bg-yellow-900/30 transition-all duration-300 hover:shadow-md rounded-t-lg group"
            >
              <div className="flex items-center gap-3">
                <ChevronRight 
                  className={`h-5 w-5 text-yellow-600 dark:text-yellow-400 transition-all duration-300 group-hover:text-yellow-700 dark:group-hover:text-yellow-300 ${
                    isFavoritesExpanded ? 'rotate-90' : 'rotate-0'
                  }`} 
                />
                <div className="flex flex-col sm:flex-row items-start sm:items-center gap-2 sm:gap-3 w-full">
                  <span className="px-4 py-2 text-sm bg-gradient-to-r from-yellow-200 to-amber-200 dark:from-yellow-800 dark:to-amber-800 text-yellow-900 dark:text-yellow-100 rounded-full font-semibold shadow-sm group-hover:shadow-md group-hover:scale-105 transition-all duration-300 flex items-center gap-2 flex-shrink-0">
                    ⭐ {t('bidLine.myFavorites')}
                  </span>
                  <div className="flex flex-wrap items-center gap-2 text-xs sm:text-sm">
                    {(() => {
                      const availableCount = favoriteBidLines?.filter((line: any) => line.status === 'AVAILABLE').length || 0;
                      const takenCount = favoriteBidLines?.filter((line: any) => line.status === 'TAKEN').length || 0;
                      const blackedOutCount = favoriteBidLines?.filter((line: any) => line.status === 'BLACKED_OUT').length || 0;
                      const totalCount = favoriteBidLines?.length || 0;
                      
                      return (
                        <>
                          {availableCount > 0 && (
                            <div className="px-3 py-1.5 rounded-lg font-semibold bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 transition-all duration-300">
                              {availableCount} {translations.scheduleMetrics?.available || 'available'}
                            </div>
                          )}
                          {takenCount > 0 && (
                            <div className="px-3 py-1.5 rounded-lg font-semibold bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200 transition-all duration-300">
                              {takenCount} {translations.scheduleMetrics?.assigned || 'assigned'}
                            </div>
                          )}
                          {blackedOutCount > 0 && (
                            <div className="px-3 py-1.5 rounded-lg font-semibold bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 transition-all duration-300">
                              {blackedOutCount} {translations.scheduleMetrics?.blackedOut || 'blacked out'}
                            </div>
                          )}
                          <div className="px-3 py-1.5 rounded-lg font-semibold bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200 transition-all duration-300">
                            {totalCount} {translations.bidLine?.total || 'total'}
                          </div>
                        </>
                      );
                    })()}
                  </div>
                </div>
              </div>
              <div className="text-right">
                <div className="text-sm text-yellow-600 dark:text-yellow-400">
                  {isFavoritesExpanded ? t('bidLine.clickToCollapse') : t('bidLine.clickToExpand')}
                </div>
              </div>
            </button>

            {/* Favorites Content */}
            {isFavoritesExpanded && (
              <div className="px-2 sm:px-6 pb-6 animate-in slide-in-from-top-2 fade-in duration-300">
                {/* Favorites Search */}
                <div className="mb-6 bg-yellow-50/50 dark:bg-yellow-900/20 rounded-xl p-4 border border-yellow-100 dark:border-yellow-800 hover:bg-yellow-50/70 dark:hover:bg-yellow-900/30 transition-all duration-300">
                  <div className="flex items-center justify-between mb-3">
                    <h3 className="text-sm font-semibold text-gray-800 dark:text-gray-300">{t('bidLine.searchFavorites')}</h3>
                    {favoritesSearchTerm && (
                      <button
                        onClick={() => setFavoritesSearchTerm('')}
                        className="flex items-center gap-1 text-xs text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 px-2 py-1 rounded bg-white dark:bg-gray-600 transition-all duration-300 hover:shadow-md hover:scale-105 transform"
                      >
                        <X className="h-3 w-3" />
                        Clear
                      </button>
                    )}
                  </div>
                  <div className="relative">
                    <input
                      type="text"
                      value={favoritesSearchTerm}
                      onChange={(e) => setFavoritesSearchTerm(e.target.value)}
                      placeholder={t('bidLine.searchFavoritesPlaceholder')}
                      className="w-full pl-11 pr-4 py-3 rounded-xl border-2 border-gray-200 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400 shadow-sm focus:border-yellow-500 focus:ring-4 focus:ring-yellow-500/20 transition-all duration-200"
                    />
                    <Search className="absolute left-4 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400 dark:text-gray-500" />
                  </div>
                  {favoritesSearchTerm ? (
                    <div className="mt-3 flex items-center justify-between text-xs">
                      <span className="text-gray-600 dark:text-gray-400">
                        {translations.bidLine?.found || 'Found'} <span className="font-medium text-yellow-600 dark:text-yellow-400">{filterFavoriteLines(favoriteBidLines).length}</span> {translations.bidLine?.of || 'of'} {favoriteBidLines.length} {translations.bidLine?.lines || 'lines'}
                      </span>
                      {filterFavoriteLines(favoriteBidLines).length === 0 && (
                        <span className="text-amber-600 dark:text-amber-400 font-medium">{translations.bidLine?.noMatches || 'No matches'}</span>
                      )}
                    </div>
                  ) : (
                    <div className="mt-3 text-xs text-gray-500 dark:text-gray-500">
                      {translations.bidLine?.searchPlaceholder || 'Search by line number, location, operation, or assigned officer'}
                    </div>
                  )}
                </div>
                {favoriteBidLines && favoriteBidLines.length > 0 ? (
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2 sm:gap-4 auto-rows-fr">
                    {filterFavoriteLines(favoriteBidLines)
                      .sort((a: any, b: any) => {
                        // First sort by status (AVAILABLE first)
                        if (a.status !== b.status) {
                          if (a.status === 'AVAILABLE') return -1;
                          if (b.status === 'AVAILABLE') return 1;
                          return a.status.localeCompare(b.status);
                        }
                        // Then natural sort by line number
                        return naturalSort(a.lineNumber, b.lineNumber);
                      })
                      .map((bidLine: any, index: number) => (
                      <div key={bidLine.id} className="animate-in fade-in slide-in-from-bottom-4 duration-500" style={{ animationDelay: `${index * 50}ms` }}>
                        <BidLineCard
                          bidLine={bidLine}
                          shouldFetchDayOffMatch={userHasDayOffRequests === true}
                          translations={{
                            favoriteRemoved: translations.favoriteRemoved,
                            favoriteAdded: translations.favoriteAdded,
                            changesError: translations.changesError,
                            lineClaimedSuccess: translations.lineClaimedSuccess,
                            lineClaimedError: translations.lineClaimedError,
                            bidLineNumber: translations.bidLineNumber,
                            bidLineClaim: translations.bidLineClaim,
                            bidLineAvailable: translations.bidLineAvailable,
                            bidLineTaken: translations.bidLineTaken,
                            bidLineBlackedOut: translations.bidLineBlackedOut,
                            daysMon: translations.daysMon,
                            daysTue: translations.daysTue,
                            daysWed: translations.daysWed,
                            daysThu: translations.daysThu,
                            daysFri: translations.daysFri,
                            daysSat: translations.daysSat,
                            daysSun: translations.daysSun,
                            // Schedule metrics translations
                            scheduleMetricsTitle: translations.scheduleMetrics?.title,
                            weekendsWorking: translations.scheduleMetrics?.weekendsWorking,
                            saturdays: translations.scheduleMetrics?.saturdays,
                            sundays: translations.scheduleMetrics?.sundays,
                            fiveDayBlocks: translations.scheduleMetrics?.fiveDayBlocks,
                            fourDayBlocks: translations.scheduleMetrics?.fourDayBlocks,
                            holidays: translations.scheduleMetrics?.holidays,
                            // Modal-specific translations
                            whatThisMeans: translations.scheduleMetrics?.whatThisMeans,
                            whyItMatters: translations.scheduleMetrics?.whyItMatters,
                            completeScheduleSummary: translations.scheduleMetrics?.completeScheduleSummary,
                            close: translations.scheduleMetrics?.close,
                            // Descriptions
                            weekendsDescription: translations.scheduleMetrics?.weekendsDescription,
                            saturdaysDescription: translations.scheduleMetrics?.saturdaysDescription,
                            sundaysDescription: translations.scheduleMetrics?.sundaysDescription,
                            fiveDayBlocksDescription: translations.scheduleMetrics?.fiveDayBlocksDescription,
                            fourDayBlocksDescription: translations.scheduleMetrics?.fourDayBlocksDescription,
                            holidaysDescription: translations.scheduleMetrics?.holidaysDescription,
                            // Explanations
                            weekendsExplanation: translations.scheduleMetrics?.weekendsExplanation,
                            saturdaysExplanation: translations.scheduleMetrics?.saturdaysExplanation,
                            sundaysExplanation: translations.scheduleMetrics?.sundaysExplanation,
                            fiveDayBlocksExplanation: translations.scheduleMetrics?.fiveDayBlocksExplanation,
                            fourDayBlocksExplanation: translations.scheduleMetrics?.fourDayBlocksExplanation,
                            holidaysExplanation: translations.scheduleMetrics?.holidaysExplanation,
                            // Day-off match modal translations
                            dayOffMatch: translations.dayOffMatch,
                          }}
                          onFavoriteToggle={(bidLineId) => handleFavoriteToggle(bidLineId, bidLine.favoriteId, bidLine.isFavorited)}
                          onClaim={canClaimLines ? handleClaim : undefined}
                          canClaim={canClaimLines}
                          isAdmin={isAdmin}
                          onManage={isAdmin ? handleManage : undefined}
                        />
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-8">
                    <div className="mx-auto w-16 h-16 bg-yellow-100 dark:bg-yellow-900/30 rounded-full flex items-center justify-center mb-4">
                      <span className="text-2xl">⭐</span>
                    </div>
                    <p className="text-gray-600 dark:text-gray-400 text-lg mb-2">No favorites yet</p>
                    <p className="text-gray-500 dark:text-gray-500 text-sm">Click the ⭐ star on any bid line to add it to your favorites</p>
                  </div>
                )}
              </div>
            )}
          </div>
        )}

        {/* Operation Controls */}
        {!isLoading && Object.keys(groupedBidLines).length > 0 && (
          <div className="flex items-center justify-between mb-4">
            <div className="text-sm text-gray-600 dark:text-gray-400">
              {Object.keys(groupedBidLines).length} {translations.bidLine?.operations || 'operations'} • {bidLines?.length || 0} lines {translations.bidLine?.total || 'total'}
            </div>
            <div className="flex gap-2">
              <button
                onClick={expandAll}
                className="px-4 py-2 text-sm bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 rounded-lg hover:bg-blue-200 dark:hover:bg-blue-800 transition-all duration-300 hover:shadow-md hover:scale-105 transform font-medium"
              >
                {translations.bidLine?.expandAll || 'Expand All'}
              </button>
              <button
                onClick={collapseAll}
                className="px-4 py-2 text-sm bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-all duration-300 hover:shadow-md hover:scale-105 transform font-medium"
              >
                {translations.bidLine?.collapseAll || 'Collapse All'}
              </button>
            </div>
          </div>
        )}

        {/* Grouped Bid Lines */}
        {isLoading ? (
          <div className="flex flex-col justify-center items-center h-64">
            <div className="relative mb-4">
              <div className="animate-spin rounded-full h-12 w-12 border-4 border-blue-200 dark:border-blue-800"></div>
              <div className="animate-spin rounded-full h-12 w-12 border-4 border-blue-600 dark:border-blue-400 border-t-transparent absolute top-0 left-0"></div>
            </div>
            <div className="text-sm text-gray-500 dark:text-gray-400 animate-pulse">Loading bid lines...</div>
          </div>
        ) : (
          <div className="space-y-6">
            {Object.entries(groupedBidLines)
              .sort(([a], [b]) => a.localeCompare(b))
              .map(([operationName, operationBidLines]) => {
                const isExpanded = expandedOperations.has(operationName);
                const filteredLines = filterOperationLines(operationBidLines, operationName);
                
                // Get total counts for this operation - use cached unfiltered counts when available
                const cachedCounts = unfilteredCounts[operationName];
                let totalAvailableCount, totalTakenCount, totalBlackedOutCount, totalCount;
                
                if (cachedCounts && selectedStatus !== 'all') {
                  // Use cached unfiltered counts when status filter is active
                  totalAvailableCount = cachedCounts.available;
                  totalTakenCount = cachedCounts.taken;
                  totalBlackedOutCount = cachedCounts.blackedOut;
                  totalCount = cachedCounts.total;
                } else {
                  // Calculate from current data when no status filter or no cache
                  const allOperationLines = allBidLines?.filter((line: any) => line.operation?.name === operationName) || [];
                  totalAvailableCount = allOperationLines.filter((line: any) => line.status === 'AVAILABLE').length;
                  totalTakenCount = allOperationLines.filter((line: any) => line.status === 'TAKEN').length;
                  totalBlackedOutCount = allOperationLines.filter((line: any) => line.status === 'BLACKED_OUT').length;
                  totalCount = allOperationLines.length;
                }
                
                // Get filtered counts from currently displayed data
                const filteredAvailableCount = operationBidLines.filter((line: any) => line.status === 'AVAILABLE').length;
                const filteredTakenCount = operationBidLines.filter((line: any) => line.status === 'TAKEN').length;
                const filteredBlackedOutCount = operationBidLines.filter((line: any) => line.status === 'BLACKED_OUT').length;
                const filteredTotalCount = operationBidLines.length;
                
                return (
                  <div key={operationName} className="bg-white/80 dark:bg-gray-800/90 backdrop-blur-sm rounded-xl border border-gray-200/50 dark:border-gray-700/50 shadow-lg hover:shadow-xl transition-all duration-300">
                    {/* Operation Header */}
                    <button
                      onClick={() => toggleOperation(operationName)}
                      className="w-full px-3 sm:px-6 py-3 sm:py-4 hover:bg-gray-50/80 dark:hover:bg-gray-750 transition-all duration-300 hover:shadow-md rounded-t-lg group"
                    >
                      <div className="flex flex-col sm:flex-row sm:items-center gap-3 sm:gap-6">
                        {/* Mobile: Operation name and chevron on top */}
                        <div className="flex items-center gap-3">
                          <ChevronRight 
                            className={`h-5 w-5 text-gray-500 dark:text-gray-400 transition-all duration-300 group-hover:text-blue-600 dark:group-hover:text-blue-400 ${
                              isExpanded ? 'rotate-90' : 'rotate-0'
                            }`} 
                          />
                          <span className="px-3 py-1.5 text-sm bg-gradient-to-r from-green-100 to-emerald-100 dark:from-green-900 dark:to-emerald-900 text-green-800 dark:text-green-200 rounded-full font-semibold shadow-sm group-hover:shadow-md transition-all duration-300">
                            {operationName}
                          </span>
                          <div className="sm:hidden text-xs text-gray-500 dark:text-gray-400">
                            {isExpanded ? 'Collapse' : 'Expand'}
                          </div>
                        </div>
                        
                        {/* Status badges - stacked on mobile */}
                        <div className="flex flex-wrap items-center gap-1.5 sm:gap-2 text-xs">
                            <div
                              onClick={(e) => {
                                e.stopPropagation();
                                setSelectedStatus('AVAILABLE');
                              }}
                              role="button"
                              tabIndex={0}
                              onKeyDown={(e) => {
                                if (e.key === 'Enter' || e.key === ' ') {
                                  e.preventDefault();
                                  e.stopPropagation();
                                  setSelectedStatus('AVAILABLE');
                                }
                              }}
                              className={`px-2 sm:px-3 py-1 sm:py-1.5 rounded-lg font-semibold transition-all duration-300 cursor-pointer transform hover:scale-105 hover:shadow-lg ${
                                selectedStatus === 'AVAILABLE' 
                                  ? 'bg-green-600 text-white shadow-lg ring-2 ring-green-300 dark:ring-green-500 scale-105' 
                                  : 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 hover:bg-green-200 dark:hover:bg-green-800 hover:shadow-md'
                              }`}
                              title={selectedStatus !== 'all' ? `${totalAvailableCount} total available lines (${filteredAvailableCount} shown in current filter). Click to filter by available only.` : `${totalAvailableCount} available lines. Click to filter by available only.`}
                            >
                              {totalAvailableCount} {translations.scheduleMetrics?.available || 'available'}
                            </div>
                            <div
                              onClick={(e) => {
                                e.stopPropagation();
                                setSelectedStatus('TAKEN');
                              }}
                              role="button"
                              tabIndex={0}
                              onKeyDown={(e) => {
                                if (e.key === 'Enter' || e.key === ' ') {
                                  e.preventDefault();
                                  e.stopPropagation();
                                  setSelectedStatus('TAKEN');
                                }
                              }}
                              className={`px-2 sm:px-3 py-1 sm:py-1.5 rounded-lg font-semibold transition-all duration-300 cursor-pointer transform hover:scale-105 hover:shadow-lg ${
                                selectedStatus === 'TAKEN' 
                                  ? 'bg-red-600 text-white shadow-lg ring-2 ring-red-300 dark:ring-red-500 scale-105' 
                                  : 'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200 hover:bg-red-200 dark:hover:bg-red-800 hover:shadow-md'
                              }`}
                              title={selectedStatus !== 'all' ? `${totalTakenCount} total assigned lines (${filteredTakenCount} shown in current filter). Click to filter by assigned only.` : `${totalTakenCount} assigned lines. Click to filter by assigned only.`}
                            >
                              {totalTakenCount} {translations.scheduleMetrics?.assigned || 'assigned'}
                            </div>
                            {totalBlackedOutCount > 0 && (
                              <div
                                onClick={(e) => {
                                  e.stopPropagation();
                                  setSelectedStatus('BLACKED_OUT');
                                }}
                                role="button"
                                tabIndex={0}
                                onKeyDown={(e) => {
                                  if (e.key === 'Enter' || e.key === ' ') {
                                    e.preventDefault();
                                    e.stopPropagation();
                                    setSelectedStatus('BLACKED_OUT');
                                  }
                                }}
                                className={`px-2 sm:px-3 py-1 sm:py-1.5 rounded-lg font-semibold transition-all duration-300 cursor-pointer transform hover:scale-105 hover:shadow-lg ${
                                  selectedStatus === 'BLACKED_OUT' 
                                    ? 'bg-gray-600 text-white shadow-lg ring-2 ring-gray-300 dark:ring-gray-500 scale-105' 
                                    : 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 hover:bg-gray-200 dark:hover:bg-gray-600 hover:shadow-md'
                                }`}
                                title={selectedStatus !== 'all' ? `${totalBlackedOutCount} total blacked out lines (${filteredBlackedOutCount} shown in current filter). Click to filter by blacked out only.` : `${totalBlackedOutCount} blacked out lines. Click to filter by blacked out only.`}
                              >
                                {totalBlackedOutCount} {translations.scheduleMetrics?.blackedOut || 'blacked out'}
                              </div>
                            )}
                            <div
                              onClick={(e) => {
                                e.stopPropagation();
                                setSelectedStatus('all');
                              }}
                              role="button"
                              tabIndex={0}
                              onKeyDown={(e) => {
                                if (e.key === 'Enter' || e.key === ' ') {
                                  e.preventDefault();
                                  e.stopPropagation();
                                  setSelectedStatus('all');
                                }
                              }}
                              className={`px-2 sm:px-3 py-1 sm:py-1.5 rounded-lg font-semibold transition-all duration-300 cursor-pointer transform hover:scale-105 hover:shadow-lg ${
                                selectedStatus === 'all' 
                                  ? 'bg-blue-600 text-white shadow-lg ring-2 ring-blue-300 dark:ring-blue-500 scale-105' 
                                  : 'bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 hover:bg-blue-200 dark:hover:bg-blue-800 hover:shadow-md'
                              }`}
                              title={selectedStatus !== 'all' ? `${totalCount} total lines (${filteredTotalCount} shown in current filter). Click to show all lines.` : `${totalCount} total lines. Already showing all.`}
                            >
                              {totalCount} {translations.bidLine?.total || 'total'}
                            </div>
                        </div>
                        
                        {/* Desktop: expand/collapse text */}
                        <div className="hidden sm:block text-right">
                          <div className="text-sm text-gray-500 dark:text-gray-400">
                            {isExpanded ? 'Click to collapse' : 'Click to expand'}
                          </div>
                        </div>
                      </div>
                    </button>

                    {/* Operation Content */}
                    {isExpanded && (
                      <div className="px-2 sm:px-6 pb-6 animate-in slide-in-from-top-2 fade-in duration-300">
                        {/* Operation Search */}
                        <div className="mb-6 bg-blue-50/50 dark:bg-gray-700/30 rounded-xl p-4 border border-blue-100 dark:border-gray-600 hover:bg-blue-50/70 dark:hover:bg-gray-700/40 transition-all duration-300">
                          <div className="flex items-center justify-between mb-3">
                            <h3 className="text-sm font-semibold text-gray-800 dark:text-gray-300">Search Lines</h3>
                            {operationSearchTerms[operationName] && (
                              <button
                                onClick={() => setOperationSearchTerms(prev => ({
                                  ...prev,
                                  [operationName]: ''
                                }))}
                                className="flex items-center gap-1 text-xs text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 px-2 py-1 rounded bg-white dark:bg-gray-600 transition-all duration-300 hover:shadow-md hover:scale-105 transform"
                              >
                                <X className="h-3 w-3" />
                                Clear
                              </button>
                            )}
                          </div>
                          <div className="relative">
                            <input
                              type="text"
                              value={operationSearchTerms[operationName] || ''}
                              onChange={(e) => setOperationSearchTerms(prev => ({
                                ...prev,
                                [operationName]: e.target.value
                              }))}
                              placeholder={t('bidLine.searchPlaceholder')}
                              className="w-full pl-11 pr-4 py-3 rounded-xl border-2 border-gray-200 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400 shadow-sm focus:border-blue-500 focus:ring-4 focus:ring-blue-500/20 transition-all duration-200"
                            />
                            <Search className="absolute left-4 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400 dark:text-gray-500" />
                          </div>
                          {operationSearchTerms[operationName] ? (
                            <div className="mt-3 flex items-center justify-between text-xs">
                              <span className="text-gray-600 dark:text-gray-400">
                                {translations.bidLine?.found || 'Found'} <span className="font-medium text-blue-600 dark:text-blue-400">{filteredLines.length}</span> {translations.bidLine?.of || 'of'} {operationBidLines.length} {translations.bidLine?.lines || 'lines'}
                              </span>
                              {filteredLines.length === 0 && (
                                <span className="text-amber-600 dark:text-amber-400 font-medium">{translations.bidLine?.noMatches || 'No matches'}</span>
                              )}
                            </div>
                          ) : (
                            <div className="mt-3 text-xs text-gray-500 dark:text-gray-500">
                              {translations.bidLine?.searchPlaceholder || 'Search by line number, location, or assigned officer'}
                            </div>
                          )}
                        </div>
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2 sm:gap-4 auto-rows-fr">
                          {filteredLines.map((bidLine: any, index: number) => (
                            <div key={bidLine.id} className="animate-in fade-in slide-in-from-bottom-4 duration-500" style={{ animationDelay: `${index * 100}ms` }}>
                              <BidLineCard
                                bidLine={bidLine}
                                shouldFetchDayOffMatch={userHasDayOffRequests === true}
                              translations={{
                                favoriteRemoved: translations.favoriteRemoved,
                                favoriteAdded: translations.favoriteAdded,
                                changesError: translations.changesError,
                                lineClaimedSuccess: translations.lineClaimedSuccess,
                                lineClaimedError: translations.lineClaimedError,
                                bidLineNumber: translations.bidLineNumber,
                                bidLineClaim: translations.bidLineClaim,
                                bidLineAvailable: translations.bidLineAvailable,
                                bidLineTaken: translations.bidLineTaken,
                                bidLineBlackedOut: translations.bidLineBlackedOut,
                                daysMon: translations.daysMon,
                                daysTue: translations.daysTue,
                                daysWed: translations.daysWed,
                                daysThu: translations.daysThu,
                                daysFri: translations.daysFri,
                                daysSat: translations.daysSat,
                                daysSun: translations.daysSun,
                                // Schedule metrics translations
                                scheduleMetricsTitle: translations.scheduleMetrics?.title,
                                weekendsWorking: translations.scheduleMetrics?.weekendsWorking,
                                saturdays: translations.scheduleMetrics?.saturdays,
                                sundays: translations.scheduleMetrics?.sundays,
                                fiveDayBlocks: translations.scheduleMetrics?.fiveDayBlocks,
                                fourDayBlocks: translations.scheduleMetrics?.fourDayBlocks,
                                holidays: translations.scheduleMetrics?.holidays,
                                // Modal-specific translations
                                whatThisMeans: translations.scheduleMetrics?.whatThisMeans,
                                whyItMatters: translations.scheduleMetrics?.whyItMatters,
                                completeScheduleSummary: translations.scheduleMetrics?.completeScheduleSummary,
                                close: translations.scheduleMetrics?.close,
                                // Descriptions
                                weekendsDescription: translations.scheduleMetrics?.weekendsDescription,
                                saturdaysDescription: translations.scheduleMetrics?.saturdaysDescription,
                                sundaysDescription: translations.scheduleMetrics?.sundaysDescription,
                                fiveDayBlocksDescription: translations.scheduleMetrics?.fiveDayBlocksDescription,
                                fourDayBlocksDescription: translations.scheduleMetrics?.fourDayBlocksDescription,
                                holidaysDescription: translations.scheduleMetrics?.holidaysDescription,
                                // Explanations
                                weekendsExplanation: translations.scheduleMetrics?.weekendsExplanation,
                                saturdaysExplanation: translations.scheduleMetrics?.saturdaysExplanation,
                                sundaysExplanation: translations.scheduleMetrics?.sundaysExplanation,
                                fiveDayBlocksExplanation: translations.scheduleMetrics?.fiveDayBlocksExplanation,
                                fourDayBlocksExplanation: translations.scheduleMetrics?.fourDayBlocksExplanation,
                                holidaysExplanation: translations.scheduleMetrics?.holidaysExplanation,
                                // Day-off match modal translations
                                dayOffMatch: translations.dayOffMatch,
                              }}
                              onFavoriteToggle={(bidLineId) => handleFavoriteToggle(bidLineId, bidLine.favoriteId, bidLine.isFavorited)}
                              onClaim={canClaimLines ? handleClaim : undefined}
                              canClaim={canClaimLines}
                              isAdmin={isAdmin}
                              onManage={isAdmin ? handleManage : undefined}
                            />
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                );
              })}
          </div>
        )}

        {!isLoading && Object.keys(groupedBidLines).length === 0 && (
          <div className="text-center py-12 animate-in fade-in slide-in-from-bottom-4 duration-500">
            <div className="mx-auto w-24 h-24 bg-gray-100 dark:bg-gray-700 rounded-full flex items-center justify-center mb-4 transition-colors duration-300 hover:bg-gray-200 dark:hover:bg-gray-600">
              <svg className="w-12 h-12 text-gray-400 dark:text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
            </div>
            <p className="text-gray-500 dark:text-gray-400 text-lg transition-colors duration-300 hover:text-gray-600 dark:hover:text-gray-300">{translations.noData}</p>
          </div>
        )}
        </div>
      </div>

      {/* Admin Notification Modal */}
      <AdminNotificationModal locale={locale} />
    </>
  );
}